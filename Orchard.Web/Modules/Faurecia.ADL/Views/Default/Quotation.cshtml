@model Faurecia.ADL.ViewModels.ADLViewModel
@{
    Script.Require("jQueryUI");
    Script.Require("Microsoft_jQueryAjax_Validate");
    Style.Require("jQueryUI");
    Style.Require("FaureciaADLStyle");
    Response.Cache.SetCacheability(System.Web.HttpCacheability.NoCache);
}
<h1 style="margin:5px 10px 10px 10px">
    @ViewBag.Title
</h1>
@using (Ajax.BeginForm("Save", "Default", new AjaxOptions { HttpMethod = "Post"
                                , OnBegin="beginSave"
                                , OnComplete="completeSave" }))
{
    @Html.AntiForgeryToken()
    string returnUrl = Request["ReturnUrl"];
    <div class="panel panel-default" style="min-width:1138px;">
        <div class="panel-heading">
            <div class="row">
                <div class="col-lg-6 col-sm-6 col-xs-6">
                @if (Model.Action != Faurecia.ADL.ViewModels.EnumActions.View)
                {
                    if (Model.Head.Phase == Faurecia.ADL.Models.EnumPhase.IBP)
                    {
                        if (Model.Head.Status == Faurecia.ADL.Models.EnumStatus.Frozen)
                        {
                            <button class="btn btn-info" type="submit" name="submit.ECR" value="@T("ECR")">@T("ECR")</button>
                        }
                        else
                        {
                            <button class="btn btn-info" type="submit" name="submit.Reject" value="@T("Reject")">@T("Reject")</button>
                            <button class="btn btn-primary" type="submit" name="submit.Submit" value="@T("Submit")">@T("Submit")</button>
                        }
                    }
                    else
                    {
                        <button class="btn btn-info" type="submit" name="submit.Save" value="@T("Save")">@T("Save")</button>
                        <button class="btn btn-info" type="submit" name="submit.Confirm" value="@T("Confirm")">@T("Confirm")</button>
                        <button class="btn btn-primary" type="submit" name="submit.Submit" value="@T("Submit")">@T("Submit")</button>
                    }
                }
                &nbsp;
                </div>
                <div class="col-lg-6 col-sm-6 col-xs-6 text-right">
                    @if (!string.IsNullOrEmpty(returnUrl))
                    {
                        @Html.Link(T("Back").Text, returnUrl,new { @class = "btn btn-default" });
                    }
                    <button type="button" class="btn btn-sm btn-warning glyphicon-collapse-down" data-toggle="collapse" data-target="#baseInfo"/>
                </div>
            </div>
        </div>
        <div class="alert fade in hide" resource="alert" id="statusMessage">
            <button type="button" class="close" onclick="hideStatusMessage()">
                <span aria-hidden="true">×</span><span class="sr-only">Close</span>
            </button>
            <p></p>
        </div>
        <div id="baseInfo" class="collapse in" >
        <div class="panel-body">
            @Html.HiddenFor(m=>m.Action)
            <div id="head">
                @Html.Partial("_Head", Model)
            </div>
        </div>
        </div>
        <div class="panel-body">
            <!-- Nav tabs -->
            <ul class="nav nav-tabs" role="tablist" id="detailTab">
                @for (int i = 0; i < Model.Years.Count; i++)
                {
                    int year = Model.Years[i];
                    var tabName = string.Format("YEAR{0}", year);
                    if (i==0)
                    {
                        <li role="presentation" class="active">
                            <a href="#@tabName" role="tab" data-toggle="tab">@year</a>
                            @Html.HiddenFor(m => m.Years[i])
                        </li>
                    }
                    else
                    {
                        <li role="presentation">
                            <a href="#@tabName" role="tab" data-toggle="tab">@year</a>
                            @Html.HiddenFor(m => m.Years[i])
                        </li>
                    }
                }
            </ul>
            <!-- Tab panes -->
            <div class="tab-content">
                @Html.Partial("_Detail", Model)
            </div>
            <div class="row" style="margin-top:10px">
                @Html.LabelFor(m => m.Head.WBSID, T("WBS ID").Text, new { @class = "col-sm-2 col-lg-2 col-xs-2 control-label", @style = "text-align:left" })
                <div class="col-sm-4 col-lg-4">
                    @Html.TextBoxFor(m => m.Head.WBSID, new { @class = "form-control", placeholder = "" })
                    @Html.ValidationMessageFor(m => m.Head.WBSID)
                </div>
                <div class="col-sm-6 col-lg-6">
                    <table class="table table-bordered table-condensed table-hover" id="totalTable"
                           style="width:auto;margin-right:0px;margin-left:Auto;margin-bottom:0px;margin-top:0px">
                        <thead>
                            <tr class="active">
                                <th style="width:auto">@T("Actual H")</th>
                                @for (int i = 0; i < Model.Years.Count; i++)
                                {
                                    int year = Model.Years[i];
                                    var titleName = string.Format("Y{0}", year);
                                    <th style="width:61px" data-year="@year">@titleName</th>
                                }
                                <th style="width:61px">@T("Total")</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td style="width:auto">@T("Total D&D")</td>
                                @for (int i = 0; i < Model.Years.Count; i++)
                                {
                                    int year = Model.Years[i];
                                    <td style="width:61px" data-total-group="@Faurecia.ADL.Models.ActivityTypeTotalGroup.DD" data-year="@year"></td>
                                }
                                <td style="width:61px"></td>
                            </tr>
                            <tr>
                                <td style="width:auto">@T("Total FEA")</td>
                                @for (int i = 0; i < Model.Years.Count; i++)
                                {
                                    int year = Model.Years[i];
                                    <td style="width:61px" data-total-group="@Faurecia.ADL.Models.ActivityTypeTotalGroup.FEA" data-year="@year"></td>
                                }
                                <td style="width:61px"></td>
                            </tr>
                            <tr>
                                <td style="width:auto">@T("Total DV")</td>
                                @for (int i = 0; i < Model.Years.Count; i++)
                                {
                                    int year = Model.Years[i];
                                    <td style="width:61px" data-total-group="@Faurecia.ADL.Models.ActivityTypeTotalGroup.DV" data-year="@year"></td>
                                }
                                <td style="width:61px"></td>
                            </tr>
                            <tr>
                                <td style="width:auto">@T("Total PV")</td>
                                @for (int i = 0; i < Model.Years.Count; i++)
                                {
                                    int year = Model.Years[i];
                                    <td style="width:61px" data-total-group="@Faurecia.ADL.Models.ActivityTypeTotalGroup.PV" data-year="@year"></td>
                                }
                                <td style="width:61px"></td>
                            </tr>
                            <tr class="success">
                                <td style="width:auto">@T("Total D&D (BP)")</td>
                                @for (int i = 0; i < Model.Years.Count; i++)
                                {
                                    int year = Model.Years[i];
                                    <td style="width:61px" data-sum="1" data-year="@year"></td>
                                }
                                <td style="width:61px"></td>
                            </tr>
                            <tr>
                                <td style="width:auto">@T("Total other CT")</td>
                                @for (int i = 0; i < Model.Years.Count; i++)
                                {
                                    int year = Model.Years[i];
                                    <td style="width:61px" data-total-group="@Faurecia.ADL.Models.ActivityTypeTotalGroup.otherCT" data-year="@year"></td>
                                }
                                <td style="width:61px"></td>
                            </tr>
                            <tr>
                                <td style="width:auto">@T("Total ME")</td>
                                @for (int i = 0; i < Model.Years.Count; i++)
                                {
                                    int year = Model.Years[i];
                                    <td style="width:61px" data-total-group="@Faurecia.ADL.Models.ActivityTypeTotalGroup.ME" data-year="@year"></td>
                                }
                                <td style="width:61px"></td>
                            </tr>
                            <tr class="success">
                                <td style="width:auto">@T("Total CT (BP)")</td>
                                @for (int i = 0; i < Model.Years.Count; i++)
                                {
                                    int year = Model.Years[i];
                                    <td style="width:61px" data-sum="1" data-year="@year"></td>
                                }
                                <td style="width:61px"></td>
                            </tr>
                            <tr class="success">
                                <td style="width:auto">@T("Total travel")</td>
                                @for (int i = 0; i < Model.Years.Count; i++)
                                {
                                    int year = Model.Years[i];
                                    <td style="width:61px" data-sum="1" data-total-group="@Faurecia.ADL.Models.ActivityTypeTotalGroup.Travel" data-year="@year"></td>
                                }
                                <td style="width:61px"></td>
                            </tr>
                            <tr class="warning">
                                <td style="width:auto">@T("Total")</td>
                                @for (int i = 0; i < Model.Years.Count; i++)
                                {
                                    int year = Model.Years[i];
                                    <td style="width:61px" data-total="1" data-year="@year"></td>
                                }
                                <td style="width:61px"></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            @if (Model.Head.Phase == Faurecia.ADL.Models.EnumPhase.Quotation
                || Model.Head.Phase == Faurecia.ADL.Models.EnumPhase.IBP)
            {
            <div class="row" style="padding:5px;">
                @Html.LabelFor(m => m.Head.QuotationComments, T("Quotation Comments").Text, new { @class = "col-sm-2 col-lg-2 col-xs-2 control-label", @style = "text-align:left" })
                <div class="col-sm-10 col-lg-10">
                    @Html.TextAreaFor(m => m.Head.QuotationComments, new { @class = "form-control", placeholder = "", rows = "10" })
                    @Html.ValidationMessageFor(m => m.Head.QuotationComments)
                </div>
            </div>
            }
            @if (Model.Head.Phase == Faurecia.ADL.Models.EnumPhase.IBP)
            {
            <div class="row" style="padding:5px;">
                @Html.LabelFor(m => m.Head.IBPComments, T("IBP Comments").Text, new { @class = "col-sm-2 col-lg-2 col-xs-2 control-label", @style = "text-align:left" })
                <div class="col-sm-10 col-lg-10">
                    @Html.TextAreaFor(m => m.Head.IBPComments, new { @class = "form-control", placeholder = "", rows = "10" })
                    @Html.ValidationMessageFor(m => m.Head.IBPComments)
                </div>
            </div>
            }
        </div>
        <div class="panel-footer">
            <div class="form-horizontal">
                <div class="form-group">
                    @if (Model.Action == Faurecia.ADL.ViewModels.EnumActions.View)
                    {
                        @Html.LabelFor(m => m.Head.IBP, T("IBP").Text, new { @class = "col-sm-2 col-lg-2 col-xs-2 control-label", @style = "text-align:left" })
                        <div class="col-sm-2 col-lg-2 col-xs-2">
                            <label class="control-label text-success" style="text-align:left">
                                @Model.Head.IBP
                            </label>
                        </div>
                        @Html.LabelFor(m => m.Head.Quotation, T("Quotation").Text, new { @class = "col-sm-2 col-lg-2 col-xs-2 control-label", @style = "text-align:left" })
                        <div class="col-sm-2 col-lg-2 col-xs-2">
                            <label class="control-label text-success" style="text-align:left">
                                @Model.Head.Quotation
                            </label>
                        </div>
                        <label class="col-sm-2 col-lg-2 col-xs-2 control-label" style="text-align:left">
                            @T("Creator").Text
                        </label>
                        <div class="col-sm-2 col-lg-2 col-xs-2">
                            <label class="control-label text-success" style="text-align:left">
                                @Model.Head.Creator
                            </label>
                        </div>
                    }
                    else if (Model.Head.Phase == Faurecia.ADL.Models.EnumPhase.Creating)
                    {
                        @Html.LabelFor(m => m.Head.Quotation, T("Quotation").Text, new { @class = "col-sm-2 col-lg-2 col-xs-2 control-label", @style = "text-align:left" })
                        <div class="col-sm-3 col-lg-3">
                            @Html.DropDownListFor(m => m.Head.Quotation, Model.Quotations, new { @class = "form-control", placeholder = "" })
                            @Html.ValidationMessageFor(m => m.Head.Quotation)
                        </div>
                        <div class="col-sm-3 col-lg-3">
                        </div>
                        <label class="col-sm-2 col-lg-2 col-xs-2 control-label" style="text-align:left">
                            @T("Creator").Text
                        </label>
                        <div class="col-sm-2 col-lg-2 col-xs-2">
                            <label class="control-label text-success" style="text-align:left">
                                @WorkContext.CurrentUser.UserName
                            </label>
                        </div>
                    }
                    else if (Model.Head.Phase == Faurecia.ADL.Models.EnumPhase.Quotation || Model.Head.Phase == Faurecia.ADL.Models.EnumPhase.ECR)
                    {
                        @Html.LabelFor(m => m.Head.IBP, T("IBP").Text, new { @class = "col-sm-2 col-lg-2 col-xs-2 control-label", @style = "text-align:left" })
                        <div class="col-sm-2 col-lg-2 col-xs-2">
                            @Html.DropDownListFor(m => m.Head.IBP, Model.IBPs, new { @class = "form-control", placeholder = "" })
                            @Html.ValidationMessageFor(m => m.Head.IBP)
                        </div>
                        @Html.LabelFor(m => m.Head.Quotation, T("Quotation").Text, new { @class = "col-sm-2 col-lg-2 col-xs-2 control-label", @style = "text-align:left" })
                        <div class="col-sm-2 col-lg-2 col-xs-2">
                            <label class="control-label text-success" style="text-align:left">
                                @WorkContext.CurrentUser.UserName
                            </label>
                        </div>
                        <label class="col-sm-2 col-lg-2 col-xs-2 control-label" style="text-align:left">
                            @T("Creator").Text
                        </label>
                        <div class="col-sm-2 col-lg-2 col-xs-2">
                            <label class="control-label text-success" style="text-align:left">
                                @Model.Head.Creator
                            </label>
                        </div>
                    }
                    else if (Model.Head.Phase == Faurecia.ADL.Models.EnumPhase.IBP)
                    {
                        @Html.LabelFor(m => m.Head.IBP, T("IBP").Text, new { @class = "col-sm-2 col-lg-2 col-xs-2 control-label", @style = "text-align:left" })
                        <div class="col-sm-2 col-lg-2 col-xs-2">
                            <label class="control-label text-success" style="text-align:left">
                                @WorkContext.CurrentUser.UserName
                            </label>
                        </div>
                        @Html.LabelFor(m => m.Head.Quotation, T("Quotation").Text, new { @class = "col-sm-2 col-lg-2 col-xs-2 control-label", @style = "text-align:left" })
                        <div class="col-sm-2 col-lg-2 col-xs-2">
                            <label class="control-label text-success" style="text-align:left">
                                @Model.Head.Quotation
                            </label>
                        </div>
                        <label class="col-sm-2 col-lg-2 col-xs-2 control-label" style="text-align:left">
                            @T("Creator").Text
                        </label>
                        <div class="col-sm-2 col-lg-2 col-xs-2">
                            <label class="control-label text-success" style="text-align:left">
                                @Model.Head.Creator
                            </label>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal -->
<div class="modal fade" id="activityTypeModal" tabindex="-1" role="dialog" aria-labelledby="activityTypeModalTitle" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content" id="activityTypeModalWindow">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title" id="activityTypeModalTitle" style="cursor:move">@T("Activity Types")</h4>
            </div>
            <div class="modal-body">
                <div id="activityTypeContent">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="btnAddActivityTypeRow" onclick="AddActivityTypeRow()">Save</button>
            </div>
        </div>
    </div>
</div>

@using (Script.Foot())
{
    <script type="text/javascript">


        function popoverTitle() {
            var title="";

            var date=$(this).data("date");
            if(!!date){
                title=$("#"+date).val();
            }
            else{
                var year = $(this).data("year");
                var month = $(this).data("month");
                var day = $(this).data("day");
                var name = $(this).data("name");
                name=name.split("_")[1];
                title=name+"("+year+"-"+month+"-"+day+")";
            }
            return title;
        }

        function popoverContent() {

            var adlRecordId=@Model.Head.Id;
            var date=$(this).data("date");
            var year = -1;
            var month =-1;
            var name=$(this).data("name");
            if(!!date){
                name=date;
            }
            else{
                year = $(this).data("year");
                month = $(this).data("month");
            }

            var popoverObject=$(this);
            var popover=$("<div></div>");
            var action="@Model.Action";
            var phase="@Model.Head.Phase";
            var status="@Model.Head.Status";
            //Content
            var content = $("<div style=\"padding-top:5px\"></div>");
            if(!!date){
                if (action != "@Faurecia.ADL.ViewModels.EnumActions.View"
                    && phase != "@Faurecia.ADL.Models.EnumPhase.IBP"
                    && status!="@Faurecia.ADL.Models.EnumStatus.Frozen")
                {
                    //Header
                    var header = $("<div class=\"input-group\"></div>");
                    var text=$("<input type=\"text\" class=\"form-control\" placeholder=\"\">");
                    var buttonContent = $("<span class=\"input-group-btn\"></span>");
                    var button = $("<button class=\"btn btn-default\" type=\"button\">Add!</button>");
                    $(buttonContent).append(button);
                    $(header).append(text);
                    $(header).append(buttonContent);
                    //add kick off
                    $(button).bind("click", function () {
                        var textVal=$(text).val().trim();
                        if(textVal==""){ return;}
                        var addUrl = "@Url.Action("AddKickOff", new { area = "Faurecia.ADL" })";
                        var addTimestamp = Math.round(new Date().getTime() / 1000);
                        var reqdata ={Name:name, ADLRecordId:adlRecordId,Year: year, Month:month,Content:textVal, key: addTimestamp };

                        $.ajax({
                            type: "get",
                            url: addUrl,
                            data: reqdata,
                            async: false,
                            success: function (data) {
                                addKickOff($(popoverObject),$(content),data);
                            }
                        });
                        $(text).val("");
                        $(popoverObject).popover("show");
                        setPopoverUI($(popoverObject));
                    });
                }
            }
            //init kick off content
            var initTimestamp = Math.round(new Date().getTime() / 1000);
            if(!!date){
                var initUrl = "@Url.Action("GetKickOffsByName", new { area = "Faurecia.ADL" })";
                var reqdata ={Name:name, ADLRecordId:adlRecordId, key: initTimestamp };
                $.ajax({
                    type: "get",
                    url: initUrl,
                    data: reqdata,
                    async: false,
                    success: function (results) {
                        $(results).each(function(index, data){
                            addKickOff($(popoverObject),$(content),data,false);
                        });
                    }
                });
            }
            else{
                var initUrl = "@Url.Action("GetKickOffs", new { area = "Faurecia.ADL" })";
                var reqdata ={ Name:name,ADLRecordId:adlRecordId,Year: year, Month:month, key: initTimestamp };
                $.ajax({
                    type: "get",
                    url: initUrl,
                    data: reqdata,
                    async: false,
                    success: function (results) {
                        $(results).each(function(index, data){
                            addKickOff($(popoverObject),$(content),data,true);
                        });
                    }
                });
            }

            $(popover).append(header);
            $(popover).append(content);
            $(popover).bind("click",function(event){
                event.stopPropagation();
            });
            return $(popover);
        }

        function addKickOff(popoverObject,content,data,isOnlyView){

            var action="@Model.Action";
            var phase="@Model.Head.Phase";
            var status="@Model.Head.Status";

            var alertClass="alert-success";
            if(data.Year<0){
                alertClass="alert-warning";
            }
            var alert = $("<div class=\"alert "+alertClass+" alert-dismissible\" role=\"alert\" style=\"padding-top:2px;padding-bottom:2px;margin-top:2px;margin-bottom:2px;\"></div>");
          
            var alertContent = $("<span></span>");
            $(alertContent).html(data.Content);
            $(alert).append(alertContent);

            if(!isOnlyView)
            {
                if (action != "@Faurecia.ADL.ViewModels.EnumActions.View"
                    && phase != "@Faurecia.ADL.Models.EnumPhase.IBP"
                    && status!="@Faurecia.ADL.Models.EnumStatus.Frozen")
                {
                    var alertCloseButton = $("<button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"></button>");
                    $(alertCloseButton).append("<span aria-hidden=\"true\">&times;</span>");
                    $(alertCloseButton).prop("recordId",data.Id);

                    //delete kick off
                    $(alertCloseButton).bind("click", function (event) {
                        var deleteUrl = "@Url.Action("DeleteKickOff", new { area = "Faurecia.ADL" })";
                        var deleteTimestamp = Math.round(new Date().getTime() / 1000);
                        var recordId=$(alertCloseButton).prop("recordId");
                        var reqdata ={ RecordId:recordId, key: deleteTimestamp };
                        $.ajax({
                            type: "get",
                            url: deleteUrl,
                            data: reqdata,
                            async: false,
                            success: function (data) {}
                        });
                        $(popoverObject).popover("show");
                        setPopoverUI($(popoverObject));
                    });
                
                    $(alert).append(alertCloseButton);
                }
            }
            $(content).append(alert);
        }

        function setPopoverUI(popover) {

           
            var timestamp = Math.round(new Date().getTime() / 1000);
            var adlRecordId=@Model.Head.Id;
            var date=$(popover).data("date");
            if(!!date)
            {
                var url = "@Url.Action("GetKickOffCountByName", new { area = "Faurecia.ADL" })";
                var reqdata ={Name:date, ADLRecordId:adlRecordId, key: timestamp };
                $.get(url, reqdata, function (data) {
                    $(popover).text(data);
                });
            }
            else
            {
                @*var url = "@Url.Action("GetKickOffCount", new { area = "Faurecia.ADL" })";
                var year = $(popover).data("year");
                var month = $(popover).data("month");
                var reqdata ={ ADLRecordId:adlRecordId,Year: year, Month:month, key: timestamp };

                $.get(url, reqdata, function (data) {
                    $(popover).text(data);
                });*@
            }
        }

        function banBackSpace(e) 
        {  
            var ev = e || window.event;
            var obj = ev.target || ev.srcElement;
            var t = obj.type || obj.getAttribute('type');
            //获取作为判断条件的事件类型  
            var vReadOnly = obj.readOnly;  
            var vDisabled = obj.disabled;  
            //处理undefined值情况  
            vReadOnly = (vReadOnly == undefined) ? false : vReadOnly;  
            vDisabled = (vDisabled == undefined) ? true : vDisabled;  
            //当敲Backspace键时，事件源类型为密码或单行、多行文本的，  
            //并且readOnly属性为true或disabled属性为true的，则退格键失效  
            var flag1 = ev.keyCode == 8 && (t == "password" || t == "text" || t == "textarea") && (vReadOnly == true || vDisabled == true);  
            //当敲Backspace键时，事件源类型非密码或单行、多行文本的，则退格键失效  
            var flag2 = ev.keyCode == 8 && t != "password" && t != "text" && t != "textarea";  
            //判断  
            if (flag2 || flag1) return false  
        }  
        //禁止退格键 作用于Firefox、Opera  
        document.onkeypress = banBackSpace;  
        //禁止退格键 作用于IE、Chrome  
        document.onkeydown = banBackSpace;  

        $(function () {

            //$("[data-toggle='popover']").popover({
            //    title: popoverTitle,
            //    content:popoverContent
            //});
            //$("[data-toggle='popover']").bind("click",function(event){
            //    $(this).popover("toggle");
            //    event.stopPropagation();
            //});

            //$("[data-toggle='popover']").each(function(i,data){
            //    setPopoverUI($(this));
            //});

            //$("body").bind("click",function(){
            //    $("[data-toggle='popover']").popover("hide");
            //});

            if ("@Model.Action" == "@Faurecia.ADL.ViewModels.EnumActions.View") {
                $("input").attr("readonly", "readonly");
                $("select").bind("focus", function () {
                    this.defaultIndex = this.selectedIndex;
                }).bind("change", function () {
                    this.selectedIndex = this.defaultIndex;
                }).bind("mousedown", function (event) {
                    event.preventDefault();
                });
                $("textarea").attr("readonly", "readonly");
            }
            else if ("@Model.Head.Phase" == "@Faurecia.ADL.Models.EnumPhase.IBP") {
                $("input").attr("readonly", "readonly");
                $("select").attr("readonly", "readonly");
                $("select").bind("focus", function () {
                    this.defaultIndex = this.selectedIndex;
                }).bind("change", function () {
                    this.selectedIndex = this.defaultIndex;
                }).bind("mousedown", function (event) {
                    event.preventDefault();
                });
                if ("@Model.Head.Status" == "@Faurecia.ADL.Models.EnumStatus.Frozen") {
                    $("textarea").attr("readonly", "readonly");
                }
                else {
                    $("textarea:not([name$='IBPComments'])").attr("readonly", "readonly");
                }
            }
            else
            {
                $(".datepicker").datepicker({
                    changeMonth: true,
                    changeYear: true,
                    autoSize: true,
                    dateFormat: "yy/mm/dd"
                });
                $("#@Html.IdFor(m => m.Action)").val("@Model.Action");
                $("#@Html.IdFor(m => m.Head.Name)").change(function () {
                    var name = $(this).val().toUpperCase();
                    $(this).val(name);
                    $("#@Html.IdFor(m => m.Head.ProjectNo)").val("");
                    $("#projectNoVersionNo").val("");
                    GetProjectNo(name);
                });

                $("table[name='HeadCount'],table[name='HourRatio'],table[name='WorkingHour'],table[name='Travel'],table[name='DV'],table[name='PV'],table[name='External'],table[name='Capitalized']").each(function (xt, xtable) {
                    $(xtable).find("tr").each(function (xr, xrow) {
                        BindCostEvent($(xrow));
                    })
                });
            }

            setTimeout(function () {
                InitailizeValue();
            }, 2000);

            $("#activityTypeModalWindow").draggable({ scroll: false });
        })
        //隐藏状态消息
        function hideStatusMessage() {
            $("#statusMessage").addClass("hide");
        }
        function showErrorInfo(result) {
            $("#statusMessage").find("p").html("");
            var message = result.Message;
            $("#statusMessage").find("p").html(message);
            $("#statusMessage").removeClass("hide");
            if (result.Code > 0) {
                $("#statusMessage").removeClass("alert-success");
                $("#statusMessage").addClass("alert-danger");
            }
            else {
                $("#statusMessage").removeClass("alert-danger");
                $("#statusMessage").addClass("alert-success");
            }
        }

        function beginSave(obj, req) {
            hideStatusMessage();
        }

        function completeSave(req) {
            var result = $.parseJSON(req.responseJSON);
            @*if (result.Action == "@Convert.ToInt32(Faurecia.ADL.ViewModels.EnumActions.Modify)") {
                $("#@Html.IdFor(m => m.Head.Name)").attr("readonly", "readonly");
            }*@
            $("#@Html.IdFor(m => m.Head.Id)").val(result.Head.Id);
            $("#@Html.IdFor(m => m.Action)").val(result.Action);
            $("#@Html.IdFor(m => m.Head.ProjectNo)").val(result.Head.ProjectNo);
            $("#@Html.IdFor(m => m.Head.VersionNo)").val(result.Head.VersionNo);
            $("#projectNoVersionNo").val(result.Head.ProjectNo + "." + result.Head.VersionNo);

            var oldPhase=$("#@Html.IdFor(m => m.Head.Phase)").val();
            $("#@Html.IdFor(m => m.Head.Phase)").val(result.Head.Phase);
            $("#@Html.IdFor(m => m.Head.Status)").val(result.Head.Status);
            $("#PhaseStatus").html(result.Head.Phase + "-" + result.Head.Status);


            showErrorInfo(result);
            if (result.Code == 0) {
                var returnUrl = "@Request["ReturnUrl"]";
                var redirectUrl = result.RedirectToHref;
                if (!!returnUrl) {
                    if ( (result.Head.NextPhase != '@Faurecia.ADL.Models.EnumPhase.ECR' && result.Head.NextPhase != oldPhase)
                        || result.Head.NextPhase == '@Faurecia.ADL.Models.EnumPhase.IBP') {
                        redirectUrl = returnUrl;
                    }
                    else {
                        redirectUrl = redirectUrl + "?returnUrl=" + returnUrl;
                    }
                }
                setTimeout(function () {
                    location.replace(redirectUrl);
                }, 1000);
            }
        }

        function GetProjectNo(name) {
            if (name.length < 1) { return; }
            var url = "@Url.Action("GetProjectNo",new { area = "Faurecia.ADL" })";
            var timestamp = Math.round(new Date().getTime() / 1000);
            var reqdata = { name: name, key: timestamp };

            $.get(url, reqdata, function (data) {
                $("#@Html.IdFor(m => m.Head.ProjectNo)").val(data);
                var versionNo = $("#@Html.IdFor(m => m.Head.VersionNo)").val();
                var projectNoVersionNo=data+"."+versionNo;
                $("#projectNoVersionNo").val(projectNoVersionNo);
            });
        }
    </script>

    @*Show Or Hide Activity Type Content*@
    <script type="text/javascript" language="javascript">

        function InitailizeValue() {
            var tabpanels = $("div[role='tabpanel']");
            tabpanels.each(function (xi, xitem) {

                //var table = $(xitem).find("table[name='HeadCount']");
                //var rows = table.find("tr");
                //for (var i = 2; i < rows.length; i++) {
                //    var cells = $(rows[i]).find("td");
                //    for (var c = 5; c < cells.length-1; c++) {
                //        var headCountInputName = $(cells[c]).find("input").attr("name");
                //        CalcCost($(xitem),"HeadCount", headCountInputName);
                //    }
                //}

                var costTables = $(xitem).find("table[name='Cost']");
                costTables.each(function (xt, xtable) {
                    var firstRow = $(xtable).find("tr:first");
                    var cells = firstRow.find("td,th");
                    for (var c = 4; c < cells.length-1; c++) {
                        var totalRow = $(xtable).find("tfoot>tr:last");
                        CalcTotal(totalRow, firstRow, cells[c]);
                    }
                });

                var tables = $(xitem).find("table[name='Travel'],table[name='DV'],table[name='PV'],table[name='External'],table[name='Capitalized']");
                tables.each(function (xt, xtable) {
                    var firstRow = $(xtable).find("tr:first");
                    var cells = firstRow.find("td,th");
                    for (var c = 1; c < cells.length - 1; c++) {
                        var totalRow = $(xtable).find("thead>tr:last");
                        CalcTotal(totalRow, firstRow, cells[c]);
                    }
                });

                var totalTableRows = $("#totalTable").find("tr");
                for (var r = 1; r < totalTableRows.length - 1; r++) {
                    var totalGroup = $(totalTableRows[r]).find("td:eq(1)").attr("data-total-group");
                    if (totalGroup == "@Faurecia.ADL.Models.ActivityTypeTotalGroup.DD"
                        || totalGroup == "@Faurecia.ADL.Models.ActivityTypeTotalGroup.ME"
                        || totalGroup == "@Faurecia.ADL.Models.ActivityTypeTotalGroup.otherCT") {
                        costTables.each(function (xt, xtable) {
                            CalcYearTotal($(xitem), $(xtable), totalGroup);
                        });
                    }
                    else if (totalGroup == "@Faurecia.ADL.Models.ActivityTypeTotalGroup.DV") {
                        $(xitem).find("table[name='DV']").each(function (xt, xtable) {
                            CalcYearTotal($(xitem), $(xtable), totalGroup);
                        });
                    }
                    else if (totalGroup == "@Faurecia.ADL.Models.ActivityTypeTotalGroup.FEA") {
                        $(xitem).find("table[name='External']").each(function (xt, xtable) {
                            CalcYearTotal($(xitem), $(xtable), totalGroup);
                        });
                    }
                    else if (totalGroup == "@Faurecia.ADL.Models.ActivityTypeTotalGroup.PV") {
                        $(xitem).find("table[name='PV']").each(function (xt, xtable) {
                            CalcYearTotal($(xitem), $(xtable), totalGroup);
                        });
                    }
                    else if (totalGroup == "@Faurecia.ADL.Models.ActivityTypeTotalGroup.Travel") {
                        $(xitem).find("table[name='Travel']").each(function (xt, xtable) {
                            CalcYearTotal($(xitem), $(xtable), totalGroup);
                        });
                    }
                }
                CalcYearTotalSum($(xitem));
                CalcGross($(xitem));
            });
        }

        function showActivityTypeModal(result) {
            $('#activityTypeModal').modal('show');
            onCompleteQueryActivityTypeResult();
        }
        
        function onCompleteQueryActivityTypeResult(){
            var activitytypeids=$("#activityTypeQueryResults").find("input[data-activitytype='Id']");
            activitytypeids.each(function(x,xitem){
                var acvitityTypeId=$(xitem).val();
                var tabpanel = $("div.active[role='tabpanel']");
                var headCountTable=$(tabpanel).find("table[name='HeadCount']");
                var activityTypeIds = $(headCountTable).find("input[name$='.ActivityType.Id'][value='" + acvitityTypeId + "']");

                if(activityTypeIds.length>0){
                    var chk= $(xitem).parent().find("input[type='checkbox']");
                    $(chk).attr("checked","true");
                    $(chk).attr("disabled","disabled");
                }
            });
        }

        function beginSaveModify() {
        }

        function AddActivityTypeRow() {

            var tabpanels = $("div[role='tabpanel']");
            tabpanels.each(function () {
                //var tabpanel = $("div.active[role='tabpanel']");
                var tabpanel = $(this);
                var activityTypeQueryResults = $("#activityTypeQueryResults");
                var activityTypes = $(activityTypeQueryResults).find("input:checked");
                for (var i = 0; i < activityTypes.length; i++) {
                    var activityTypeId = $(activityTypes[i]).val();
                    var row = $(activityTypes[i]).parent().parent();
                    var activityTypeValue = $(row).find("td:eq(1)").text();
                    var costCenter = $(row).find("td:eq(2)").text();
                    var RMBHour = $(row).find("td:eq(3)").text();
                    var comment = $(row).find("td:eq(4)").text();
                    var displayGroup = $(row).find("input[name$='.DisplayGroup']").val();
                    var totalGroup = $(row).find("input[name$='.TotalGroup']").val();

                    var activityType = { Id: activityTypeId, Comment: comment, RMBHour: RMBHour, CostCenter: costCenter, ActivityType: activityTypeValue, DisplayGroup: displayGroup, TotalGroup: totalGroup };
                    //Add Head Count Record Row
                    if (!HasDetailRecordRow(tabpanel,activityType, "HeadCount"))
                    {
                        AddDetailRecordRow(tabpanel,activityType, "HeadCount", null)
                    }
                    //Add Hour Ratio Record Row
                    if (!HasDetailRecordRow(tabpanel,activityType, "HourRatio")) {
                        var year = $(tabpanel).data("year");
                        var url = "@Url.Action("GetHourRatioRecord", new { area = "Faurecia.ADL" })";
                        var timestamp = Math.round(new Date().getTime() / 1000);
                        var reqdata = { Year: year, ActivityTypeId: activityType.Id, key: timestamp };

                        $.ajax({
                            type: "get",
                            url: url,
                            data: reqdata,
                            async: false,
                            success: function (data) {
                                AddDetailRecordRow(tabpanel,activityType, "HourRatio", data);
                            }
                        });
                    }
                    //Add Cost Record Row
                    if (!HasDetailRecordRow(tabpanel,activityType, "Cost")) {
                        AddDetailRecordRow(tabpanel,activityType, "Cost", null);

                    }
                }
            });

            $("#activityTypeModal").modal("hide");
        }

        function HasDetailRecordRow(tabpanel,activityType, tableName)
        {
            //var tabpanel = $("div.active[role='tabpanel']");
            var table = $(tabpanel).find("table[id^='detail" + tableName + "_']");
            var activityTypeIds = $(table).find("input[name$='.ActivityType.Id'][value='" + activityType.Id + "']");
            return activityTypeIds.length > 0;
        }

        function AddDetailRecordRow(tabpanel,activityType, tableName, defaultValue) {
            //var tabpanel = $("div.active[role='tabpanel']");
            var table = $(tabpanel).find("table[id^='detail" + tableName + "_']");

            var adlRecordId = $("#Head_Id").val();
            var year = $(tabpanel).data("year");
            var entryIndex = $(table).data("entryindex");

            var lastRow = $(table).find("tr:last");
            var lastRowCells = $(lastRow).find("td");
            if (lastRowCells.length == 0) {
                lastRow = $(table).find("thead tr:last");
                lastRowCells = $(lastRow).find("th");
            }
            var lastRowActivityTypeId = $(lastRow).find("input[name$='.ActivityType.Id']");
            var lastRowIndex = $(lastRowActivityTypeId).data("index");
            if (!$.isNumeric(lastRowIndex)) { lastRowIndex = -1;}
            var newindex = lastRowIndex + 1;
            var prefixName = "Detail.Entries[" + entryIndex + "]." + tableName + "s[" + newindex + "]";
            var row = $("<tr></tr>");
            var startIndex = 1;
            var endIndex = lastRowCells.length + 1;
            var style = "style='padding:0px;width:50px;height:auto;'";
            var readonly = "";

            if (tableName == "HeadCount") {
                startIndex = 0;
                endIndex = lastRowCells.length;
            }

            if (tableName == "HourRatio") {
                readonly = "readonly='readonly'";
            }

            if (tableName != "Cost")
            {
                style = style + "  maxlength='5'";
            }
            for (var i = startIndex; i < endIndex; i++) {
                if (i == 0) {
                    //TD1
                    var td1 = $("<td></td>");
                    var url="@Url.Action("DeleteDetailRecord", "Default" , new { Area = "Faurecia.ADL"})";
                    var url =url+"?ActivityTypeId=" + activityType.Id + "&Year=" + year + "&ADLRecordId=" + adlRecordId + "&EntryIndex=" + entryIndex;
                    var href = $("<a class='btn btn-warning btn-sm' href='#'>-</a>");
                    $(href).attr("data-ajax", "true");
                    $(href).attr("data-ajax-method", "GET");
                    $(href).attr("data-ajax-success", "CompleteDeleteDetailRecord");
                    $(href).attr("data-ajax-url", url);
                    td1.append(href);
                    row.append(td1);
                }
                else if (i == 1) {
                    //TD2
                    var td2 = $("<td></td>");
                    var hcId = $("<input type='hidden' value='0' name='" + prefixName + ".Id'/>")
                    var hcYear = $("<input name='" + prefixName + ".Year' type='hidden' value='" + year + "'/>")
                    var hcActivityTypeId = $("<input name='" + prefixName + ".ActivityType.Id' type='hidden' value='" + activityType.Id + "'/>");
                    $(hcActivityTypeId).attr("data-index", newindex);
                    var hcActivityTypeComment = $("<input name='" + prefixName + ".ActivityType.Comment' type='hidden' value='" + activityType.Comment + "'/>");
                    var hcDisplayGroupComment = $("<input name='" + prefixName + ".ActivityType.DisplayGroup' type='hidden' value='" + activityType.DisplayGroup + "'/>");
                    var hcTotalGroupComment = $("<input name='" + prefixName + ".ActivityType.TotalGroup' type='hidden' value='" + activityType.TotalGroup + "'/>");
                    td2.append(hcId);
                    td2.append(hcYear);
                    td2.append(hcActivityTypeId);
                    td2.append(hcActivityTypeComment);
                    td2.append(hcDisplayGroupComment);
                    td2.append(hcTotalGroupComment);
                    td2.append(activityType.Comment);
                    row.append(td2);
                }
                else if (i == 2) {
                    //TD3
                    var td3 = $("<td></td>");
                    var hcRMBHour = $("<input name='" + prefixName + ".ActivityType.RMBHour' type='hidden' value='" + activityType.RMBHour + "'/>");
                    td3.append(hcRMBHour);
                    td3.append(activityType.RMBHour);
                    row.append(td3);
                }
                else if (i == 3) {
                    //TD4
                    var td4 = $("<td></td>");
                    var hcCostCenter = $("<input name='" + prefixName + ".ActivityType.CostCenter' type='hidden' value='" + activityType.CostCenter + "'/>");
                    td4.append(hcCostCenter);
                    td4.append(activityType.CostCenter);
                    row.append(td4);
                }
                else if (i == 4) {
                    //TD5
                    var td5 = $("<td></td>");
                    var hcActitityType = $("<input name='" + prefixName + ".ActivityType.ActivityType' type='hidden' value='" + activityType.ActivityType + "'/>");
                    td5.append(hcActitityType);
                    td5.append(activityType.ActivityType);
                    row.append(td5);
                }
                else if (i == 5) {
                    //TD6
                    var td6 = $("<td></td>");
                    var input = $("<input type='text' " + style + " name='" + prefixName + ".Jan' " + readonly + "/>");
                    if (!!defaultValue) {
                        $(input).val(defaultValue.Jan);
                    }
                    td6.append(input);
                    row.append(td6);
                }
                else if (i == 6) {
                    //TD7
                    var td7 = $("<td></td>");
                    var input = $("<input type='text' " + style + " name='" + prefixName + ".Feb' " + readonly + "/>");
                    if (!!defaultValue) {
                        $(input).val(defaultValue.Feb);
                    }
                    td7.append(input);
                    row.append(td7);
                }
                else if (i == 7) {
                    //TD8
                    var td8 = $("<td></td>");
                    var input = $("<input type='text' " + style + " name='" + prefixName + ".Mar' " + readonly + "/>");
                    if (!!defaultValue) {
                        $(input).val(defaultValue.Mar);
                    }
                    td8.append(input);
                    row.append(td8);
                }
                else if (i == 8) {
                    //TD9
                    var td9 = $("<td></td>");
                    var input = $("<input type='text' " + style + " name='" + prefixName + ".Apr' " + readonly + "/>");
                    if (!!defaultValue) {
                        $(input).val(defaultValue.Apr);
                    }
                    td9.append(input);
                    row.append(td9);
                }
                else if (i == 9) {
                    //TD10
                    var td10 = $("<td></td>");
                    var input = $("<input type='text' " + style + " name='" + prefixName + ".May' " + readonly + "/>");
                    if (!!defaultValue) {
                        $(input).val(defaultValue.May);
                    }
                    td10.append(input);
                    row.append(td10);
                }
                else if (i == 10) {
                    //TD11
                    var td11 = $("<td></td>");
                    var input = $("<input type='text' " + style + " name='" + prefixName + ".Jun' " + readonly + "/>");
                    if (!!defaultValue) {
                        $(input).val(defaultValue.Jun);
                    }
                    td11.append(input);
                    row.append(td11);
                }
                else if (i == 11) {
                    //TD12
                    var td = $("<td></td>");
                    var input = $("<input type='text' " + style + " name='" + prefixName + ".Jul' " + readonly + "/>");
                    if (!!defaultValue) {
                        $(input).val(defaultValue.Jul);
                    }
                    td.append(input);
                    row.append(td);
                }
                else if (i == 12) {
                    //TD13
                    var td = $("<td></td>");
                    var input = $("<input type='text' " + style + " name='" + prefixName + ".Aug' " + readonly + "/>");
                    if (!!defaultValue) {
                        $(input).val(defaultValue.Aug);
                    }
                    td.append(input);
                    row.append(td);
                }
                else if (i == 13) {
                    //TD14
                    var td = $("<td></td>");
                    var input = $("<input type='text' " + style + " name='" + prefixName + ".Sep' " + readonly + "/>");
                    if (!!defaultValue) {
                        $(input).val(defaultValue.Sep);
                    }
                    td.append(input);
                    row.append(td);
                }
                else if (i == 14) {
                    //TD15
                    var td = $("<td></td>");
                    var input = $("<input type='text' " + style + " name='" + prefixName + ".Oct' " + readonly + "/>");
                    if (!!defaultValue) {
                        $(input).val(defaultValue.Oct);
                    }
                    td.append(input);
                    row.append(td);
                }
                else if (i == 15) {
                    //TD16
                    var td = $("<td></td>");
                    var input = $("<input type='text' " + style + " name='" + prefixName + ".Nov' " + readonly + "/>");
                    if (!!defaultValue) {
                        $(input).val(defaultValue.Nov);
                    }
                    td.append(input);
                    row.append(td);
                }
                else if (i == 16) {
                    //TD17
                    var td = $("<td></td>");
                    var input = $("<input type='text' " + style + " name='" + prefixName + ".Dev' " + readonly + "/>");
                    if (!!defaultValue) {
                        $(input).val(defaultValue.Dev);
                    }
                    td.append(input);
                    row.append(td);
                }
                else if (i == 17) {
                    //TD18
                    var td = $("<td></td>");
                    var input = $("<input type='text' "+style+" readonly='readonly' name='" + prefixName + ".Y1'/>");
                    td.append(input);
                    row.append(td);
                }
                else {
                    row.append($("<td></td>"));
                }
            }
            if (tableName == "Cost") {
                row.find("input[type='text']").each(function (x, xitem) {
                    $(xitem).attr("readonly", "readonly");
                });
            }
            else {
                BindCostEvent(row);
            }
            $(table).append(row);
            CalcY1(row);
        }

        function BindCostEvent(row) {

            $(row).find("input[type='text']").each(function (x, xitem) {
                $(xitem).bind("keypress", function (event) {
                    var val = $(this).val();
                    var key = event.key;
                    if ((key < "0" || key > "9") && key != ".") {
                        event.preventDefault();
                    }
                    if (val.indexOf(".") >= 0 && key == ".") {
                        event.preventDefault();
                    }
                    //if (val.length == 0 && key == ".") {
                    //    event.preventDefault();
                    //}
                }).bind("paste", function (event) {
                    var val = undefined;
                    if (window.clipboardData && window.clipboardData.getData) {
                        val = win.clipboardData.getData("Text");
                    }
                    else {
                        val = event.originalEvent.clipboardData.getData("Text");
                    }
                    var r = /^[0-9.]+.?[0-9]*$/
                    if (!r.test(val)) {
                        event.preventDefault();
                        alert("\""+val+"\"@T(" is not valid value.")");
                    }
                }).bind("input", function (event) {
                    var val = $(this).val();
                    @*var r = /^[0-9.]+.?[0-9]*$/
                    if (val!="" && !r.test(val)) {
                        event.preventDefault();
                        alert("\""+val+"\"@T(" is not valid value.")");
                    }*@
                    var val = $(this).val();
                    val = val.replace(/[^0-9.]/g, '');
                    $(this).val(val);

                    var table = $(row).parent();
                    var tagName = table.prop("tagName");
                    if (tagName == "TBODY") {
                        table = table.parent();
                    }
                    var tableName = table.attr("name");
                    var tabpanel = $("div.active[role='tabpanel']");
                    if (tableName == "HeadCount" || tableName == "WorkingHour" || tableName == "HourRatio") {
                        var name = $(this).attr("name");
                        CalcY1(row);

                        CalcCost(tabpanel,tableName, name);
                    }
                    else if (tableName == "Travel" || tableName == "DV" || tableName == "PV" || tableName == "External" || tableName == "Capitalized") {
                        CalcY1(row);
                        var totalRow = table.find("thead>tr:last");
                        var cell = $(this).parent();
                        CalcTotal(totalRow, row, cell);
                        var totalGroup = $(row).find("input[name$='.ActivityType.TotalGroup']").val();
                        var table = $(row).parent();

                        CalcYearTotal(tabpanel, table, totalGroup);
                        CalcYearTotalSum($(tabpanel));
                        CalcGross($(tabpanel));
                    }
                }).bind("change", function (event) {
                    var val = $(this).val();
                    val = val.replace(/[^0-9.]/g, '');
                    $(this).val(val);
                });
            });
        }

        function CalcCost(tabpanel,tableName, name) {
            if (tableName == "WorkingHour")
            {
                var table = tabpanel.find("table[name='HeadCount']");
                var rows = table.find("tr");
                for (var i = 2; i < rows.length; i++) {
                    var headCountInputName = name.replace("WorkingHours[0]", "HeadCounts[" + (i - 2) + "]");
                    CalcCost(tabpanel,"HeadCount", headCountInputName);
                }
            }
            //HeadCount Input
            var headCountInputName = name.replace(tableName, "HeadCount");
            var headCount = $("input[name='" + headCountInputName + "']").val();
            if (!$.isNumeric(headCount)) {
                headCount = 0;
            }
            //Cost Input
            var hourRatioInputName = name.replace(tableName, "HourRatio");
            var hourRatio = $("input[name='" + hourRatioInputName + "']").val();
            if (!$.isNumeric(hourRatio)) {
                hourRatio = 0;
            }
            //Working hour
            var reg=new RegExp(tableName+"s\[[0-9]*\]");
            var workingHourInputName = name.replace(reg, "WorkingHours[0]");
            var workingHour = $("input[name='" + workingHourInputName + "']").val();
            if (!$.isNumeric(workingHour)) {
                workingHour = 0;
            }
            //
            var cost = Math.round(headCount * hourRatio * workingHour * 100) / 100;
            //Cost Input
            var costInputName = name.replace(tableName, "Cost");
            var costInput = $("input[name='" + costInputName + "']");
            costInput.val(cost);

            var row = costInput.parent().parent();
            CalcY1(row);

            var costTable = row.parent();
            var tagName = row.parent().prop("tagName");
            if (tagName == "TBODY") {
                costTable = costTable.parent();
            }
            var totalRow = costTable.find("tfoot>tr:last");
            var cell = $(costInput).parent();
            CalcTotal(totalRow, row, cell);

            var totalGroup = $(row).find("input[name$='.ActivityType.TotalGroup']").val();
            CalcYearTotal(tabpanel, costTable, totalGroup);
            CalcYearTotalSum($(tabpanel));
            CalcGross($(tabpanel));
        }

        function CalcY1(row) {
            var y1 = $(row).find("input[type='text'][name$='.Y1']");
            var inputs = $(row).find("input[type='text']");
            var sum = 0;
            for (var i = 0; i < inputs.length; i++) {
                if ($(inputs[i]).attr("name") != $(y1).attr("name")) {
                    var val = $(inputs[i]).val();
                    if (!$.isNumeric(val)) {
                        val = 0;
                    }
                    sum = sum + parseFloat(val);
                }
            }
            $(y1).val(sum);
        }

        function CalcTotal(totalRow, row, cell) {

            var rowCellLength = $(row).find("td,th").length;
            var totalRowCellLength = $(totalRow).find("th").length;
            var cellIndex = $(cell).prop("cellIndex");

            var table = $(row).parent();
            var tagName = table.prop("tagName");
            if (tagName != "TABLE") {
                table = table.parent();
            }
            var rows = $(table).find("TBODY>tr");
            var sum = 0;
            for (var i = 0; i < rows.length; i++) {
                var tds = $(rows[i]).find("td");
                if (tds.length >= cellIndex) {
                    var input = $(tds[cellIndex]).find("input[type='text']");
                    if (input.length > 0) {
                        var val = $(input).val();
                        if (!$.isNumeric(val)) {
                            val = 0;
                        }
                        sum = sum + parseFloat(val);
                    }
                }
            }
            var totalRowCellIndex = (totalRowCellLength - rowCellLength) + cellIndex;
            var totalRowCell = $(totalRow).find("th:eq(" + totalRowCellIndex + ")");
            $(totalRowCell).text(sum);

            sum = 0;
            var totalRowCells = $(totalRow).find("th");
            var totalRowSumCell = $(totalRow).find("th:eq(" + (totalRowCellLength-1) + ")");
            for (var i = 1; i < totalRowCellLength; i++) {
                var totalRowCell = $(totalRowCells[i]);
                var totalRowCellIndex = $(totalRowCell).prop("cellIndex");

                if (totalRowCellIndex != (totalRowCellLength-1)) {
                    var val = $(totalRowCell).text();
                    if (!$.isNumeric(val)) {
                        val = 0;
                    }
                    sum = sum + parseFloat(val);
                }
            }
            $(totalRowSumCell).text(sum);
        }

        function CalcGross(tabpanel) {
            var costTableTr = $(tabpanel).find("table[name='Cost']").find("tr:last");
            var travelTableTr = $(tabpanel).find("table[name='Travel']").find("tr:first");
            var dvTableTr = $(tabpanel).find("table[name='DV']").find("tr:first");
            var pvTableTr = $(tabpanel).find("table[name='PV']").find("tr:first");
            var externalTableTr = $(tabpanel).find("table[name='External']").find("tr:first");
            var grossTableTr = $(tabpanel).find("table[name='Gross']").find("tr:first");

            for (var i = 1; i < 14; i++) {
                var costTd = $(costTableTr).find("th:eq(" + i + ")");
                var travelTd = $(travelTableTr).find("th:eq(" + i + ")");
                var dvTd = $(dvTableTr).find("th:eq(" + i + ")");
                var pvTd = $(pvTableTr).find("th:eq(" + i + ")");
                var externalTd = $(externalTableTr).find("th:eq(" + i + ")");
                var grossTd = $(grossTableTr).find("th:eq(" + i + ")");
                var grossValue = 0

                var val = $(costTd).text();
                if (!$.isNumeric(val)) {
                    val = 0;
                }
                grossValue = grossValue + parseFloat(val);

                var val = $(travelTd).text();
                if (!$.isNumeric(val)) {
                    val = 0;
                }
                grossValue = grossValue + parseFloat(val);

                var val = $(dvTd).text();
                if (!$.isNumeric(val)) {
                    val = 0;
                }
                grossValue = grossValue + parseFloat(val);

                var val = $(pvTd).text();
                if (!$.isNumeric(val)) {
                    val = 0;
                }
                grossValue = grossValue + parseFloat(val);

                var val = $(externalTd).text();
                if (!$.isNumeric(val)) {
                    val = 0;
                }
                grossValue = grossValue + parseFloat(val);

                $(grossTd).text(grossValue);
            }
        }

        function CalcYearTotal(tabpanel, table, totalGroup) {

            var year = $(tabpanel).data("year");
            var tagName = table.prop("tagName");
            if (tagName == "TBODY") {
                table = table.parent();
            }
            var sum = 0;
            var inputs = $(table).find("input[name$='.ActivityType.TotalGroup'][value='" + totalGroup + "']");
            for (var i = 0; i < inputs.length; i++) {
                var inputRow = $(inputs[i]).parent().parent();
                var y1 = $(inputRow).find("input[type='text'][name$='.Y1']");
                var y1Value = $(y1).val();
                if (!$.isNumeric(y1Value)) {
                    y1Value = 0;
                }
                sum = sum + parseFloat(y1Value);
            }
            var totalTable = $("#totalTable");
            var td = $(totalTable).find("td[data-year='" + year + "'][data-total-group='" + totalGroup + "']");
            $(td).text(sum);
            CalcTotalRowSum(td);
            
        }
        function CalcYearTotalSum(tabpanel) {

            var year = $(tabpanel).data("year");
            var totalTable = $("#totalTable");
            //分类汇总
            var totalSumTds = $(totalTable).find("td[data-year='" + year + "'][data-sum='1']");
            var startRowIndex = 1;
            sum = 0;
            totalSumTds.each(function (xi, xitem) {
                var totalGroup = $(xitem).attr("data-total-group");
                if (!totalGroup) {
                    var xitemRow = $(xitem).parent();
                    var rowIndex = $(xitemRow).prop("rowIndex");
                    var totalSum = 0;
                    for (var i = startRowIndex; i < rowIndex; i++) {
                        var cell = $(totalTable).find("tr:eq(" + i + ")").find("td[data-year='" + year + "']");
                        var cellValue = $(cell).text();
                        if (!$.isNumeric(cellValue)) {
                            cellValue = 0;
                        }
                        totalSum = totalSum + parseFloat(cellValue);
                    }
                    $(xitem).text(totalSum);
                    CalcTotalRowSum(xitem);
                }

                var xitemValue = $(xitem).text();
                if (!$.isNumeric(xitemValue)) {
                    xitemValue = 0;
                }
                sum = sum + parseFloat(xitemValue);
                startRowIndex = rowIndex + 1;
            });

            var totalTd = $(totalTable).find("td[data-year='" + year + "'][data-total='1']");
            $(totalTd).text(sum);
            CalcTotalRowSum(totalTd);
        }

        function CalcTotalRowSum(td) {
            var row = $(td).parent();
            var tds = $(row).find("td")
            var lastTd = $(row).find("td:last");
            var lastValue = 0;
            for (var i = 1; i < tds.length - 1; i++) {
                var cellValue = $(tds[i]).text();
                if (!$.isNumeric(cellValue)) {
                    cellValue = 0;
                }
                lastValue = lastValue + parseFloat(cellValue);
            }
            $(lastTd).text(lastValue);
        }

        
        function CompleteDeleteDetailRecord(result) {
            if (!!result.Message) {
                alert(result.Message);
                return;
            }
            //Delete Head Record Row
            $("table[id^='detailHeadCount_']").each(function(){
                var headCountTable = $(this);
                var entryIndex=$(headCountTable).data("entryIndex");
                var tabpanel=$(headCountTable).parent().parent();
                var activityTypeIds = $(headCountTable).find("input[name$='.ActivityType.Id'][value='" + result.ActivityTypeId + "']");
                replaceInputName(tabpanel,entryIndex, activityTypeIds, "HeadCounts");
            });
            //Delete Hour Ratio Record Row
            $("table[id^='detailHourRatio_']").each(function(){
                var hourRatioTable = $(this);
                var entryIndex=$(hourRatioTable).data("entryIndex");
                var tabpanel=$(hourRatioTable).parent().parent();
                activityTypeIds = $(hourRatioTable).find("input[name$='.ActivityType.Id'][value='" + result.ActivityTypeId + "']");
                replaceInputName(tabpanel,entryIndex, activityTypeIds, "HourRatios");
            });
            //Delete Cost Record Row
            $("table[id^='detailCost_']").each(function(){
                var costTable = $(this);
                var entryIndex=$(costTable).data("entryIndex");
                var tabpanel=$(costTable).parent().parent().parent();
                activityTypeIds = $(costTable).find("input[name$='.ActivityType.Id'][value='" + result.ActivityTypeId + "']");
                replaceInputName(tabpanel,result, activityTypeIds, "Costs");
            });
        }

        function replaceInputName(tabpanel,entryIndex, activityTypeIds, tableName) {
            for (var i = 0; i < activityTypeIds.length; i++) {
                var index = $(activityTypeIds[i]).data("index");
                var row = $(activityTypeIds[i]).parent().parent();
                $(row).nextAll().each(function (k, item) {
                    var activityTypeId = $(item).find("input[name$='.ActivityType.Id']");
                    var oldindex = $(activityTypeId).data("index");
                    var newindex = index + k;
                    var name = "Detail.Entries[" + entryIndex + "]." + tableName + "[" + oldindex + "]";
                    var newname = "Detail.Entries[" + entryIndex + "]." + tableName + "[" + newindex + "]";

                    $(activityTypeId).attr("data-index", newindex);
                    $(item).find("input[name^='" + name + "']").each(function (xi, xitem) {
                        var xitemName = $(xitem).attr("name").replace(name, newname);
                        $(xitem).attr("name", xitemName);
                    });
                });
                var table = $(row).parent();
                var totalGroup = $(row).find("input[name$='.ActivityType.TotalGroup']").val();
                $(row).remove();

                if (tableName == "Costs")
                {
                    var tagName = table.prop("tagName");
                    if (tagName != "TABLE") {
                        table = table.parent();
                    }
                    var firstRow = $(table).find("tr:first");
                    var cells = firstRow.find("td,th");
                    for (var c = 4; c < cells.length-1; c++) {
                        var totalRow = table.find("tfoot>tr:last");
                        CalcTotal(totalRow, firstRow, cells[c]);
                    }
                    CalcYearTotal(tabpanel, table, totalGroup);
                    CalcYearTotalSum($(tabpanel));
                    CalcGross($(tabpanel));
                }
            }
        }
    </script>
}