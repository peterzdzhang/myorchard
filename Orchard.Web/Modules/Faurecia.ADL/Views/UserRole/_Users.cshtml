@model Orchard.Users.ViewModels.UsersIndexViewModel
@using Orchard.Users.ViewModels;
@using Orchard.Users.Models;
@{
    var userIndex = 0;
}
<table class="table table-bordered table-condensed">
    <thead>
        <tr>
            <th scope="col"><input type="checkbox" class="check-all" /></th>
            <th scope="col">@T("Name")</th>
            <th scope="col">@T("Email")</th>
            <th scope="col">@T("Actions")</th>
            <th scope="col">@T("Creation Time")</th>
            <th scope="col">@T("Last Login Time")</th>
        </tr>
    </thead>
    @foreach (var entry in Model.Users)
    {
        <tr>
            <td>
                <input type="hidden" value="@Model.Users[userIndex].User.Id" name="@Html.NameOf(m => m.Users[userIndex].User.Id)" />
                <input type="checkbox" value="true" name="@Html.NameOf(m => m.Users[userIndex].IsChecked)" />
            </td>
            <td>
                @if (entry.User.RegistrationStatus == UserStatus.Approved && entry.User.EmailStatus == UserStatus.Approved)
                {
                    <img class="icon" src="@Href("~/Modules/Orchard.Users/Content/Admin/images/online.gif") " alt="@T("Approved") " title="@T("User is approved") " />
                }
                else {
                    <img class="icon" src="@Href("~/Modules/Orchard.Users/Content/Admin/images/offline.gif") " alt="@T("Moderated") " title="@if (entry.User.EmailStatus == UserStatus.Approved) { @T("User is moderated") } else { @T("E-mail validation is pending") }" />
                }
                @Ajax.ActionLink(entry.User.UserName
               , "EditUser"
               , new { entry.User.Id }
               , new AjaxOptions()
               {
                   OnComplete = "onCompleteEdit",
                   UpdateTargetId = "createContent"
               })
            </td>
            <td>
                @entry.User.Email
            </td>
            <td>
               @Ajax.ActionLink(T("Edit").ToString()
               , "EditUser"
               , new { entry.User.Id }
               , new AjaxOptions()
               {
                   OnComplete = "onCompleteEdit",
                   UpdateTargetId = "createContent"
               })
                |
                @Ajax.ActionLink(T("Delete").ToString()
                                   , "DeleteUser"
                                   , new { entry.User.Id }
                                   , new AjaxOptions()
                                   {
                                       Confirm = T("Confirm delete it?").Text,
                                       OnComplete = "onCompleteDelete"
                                   })
                |
                @if (entry.User.RegistrationStatus == UserStatus.Pending)
                {
                    @Ajax.ActionLink(T("Approve").ToString()
                                   , "ApproveUser"
                                   , new { entry.User.Id }
                                   , new AjaxOptions()
                                   {
                                       Confirm = T("Confirm approve it?").Text,
                                       OnComplete = "onCompleteDelete"
                                   })
                }
                else
                {
                    @Ajax.ActionLink(T("Disable").ToString()
                                   , "ModerateUser"
                                   , new { entry.User.Id }
                                   , new AjaxOptions()
                                   {
                                       Confirm = T("Confirm disable it?").Text,
                                       OnComplete = "onCompleteDelete"
                                   })
                }
            </td>
            <td>
                @if (entry.User.CreatedUtc != null)
                {
                    @Display(New.DateTimeRelative(dateTimeUtc: entry.User.CreatedUtc))
                }
            </td>
            <td>
                @if (entry.User.LastLoginUtc != null)
                {
                    @Display(New.DateTimeRelative(dateTimeUtc: entry.User.LastLoginUtc))
                }
            </td>
        </tr>
        userIndex++;
    }
</table>
@Display(Model.Pager)